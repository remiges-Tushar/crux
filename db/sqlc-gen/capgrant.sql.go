// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: capgrant.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const capGet = `-- name: CapGet :many
SELECT app,cap,setby,setat,"from","to" from capgrant WHERE realm = $1 and "user" = $2
`

type CapGetParams struct {
	Realm  string `json:"realm"`
	Userid string `json:"userid"`
}

type CapGetRow struct {
	App   pgtype.Text      `json:"app"`
	Cap   string           `json:"cap"`
	Setby string           `json:"setby"`
	Setat pgtype.Timestamp `json:"setat"`
	From  pgtype.Timestamp `json:"from"`
	To    pgtype.Timestamp `json:"to"`
}

func (q *Queries) CapGet(ctx context.Context, arg CapGetParams) ([]CapGetRow, error) {
	rows, err := q.db.Query(ctx, capGet, arg.Realm, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CapGetRow
	for rows.Next() {
		var i CapGetRow
		if err := rows.Scan(
			&i.App,
			&i.Cap,
			&i.Setby,
			&i.Setat,
			&i.From,
			&i.To,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteCapGranForApp = `-- name: DeleteCapGranForApp :exec

DELETE FROM capgrant WHERE app = $1 AND realm = $2
`

type DeleteCapGranForAppParams struct {
	App   pgtype.Text `json:"app"`
	Realm string      `json:"realm"`
}

func (q *Queries) DeleteCapGranForApp(ctx context.Context, arg DeleteCapGranForAppParams) error {
	_, err := q.db.Exec(ctx, deleteCapGranForApp, arg.App, arg.Realm)
	return err
}

const getCapGrantForApp = `-- name: GetCapGrantForApp :many

SELECT id, realm, "user", app, cap, "from", "to", setat, setby FROM capgrant WHERE app = $1 AND realm = $2
`

type GetCapGrantForAppParams struct {
	App   pgtype.Text `json:"app"`
	Realm string      `json:"realm"`
}

func (q *Queries) GetCapGrantForApp(ctx context.Context, arg GetCapGrantForAppParams) ([]Capgrant, error) {
	rows, err := q.db.Query(ctx, getCapGrantForApp, arg.App, arg.Realm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Capgrant
	for rows.Next() {
		var i Capgrant
		if err := rows.Scan(
			&i.ID,
			&i.Realm,
			&i.User,
			&i.App,
			&i.Cap,
			&i.From,
			&i.To,
			&i.Setat,
			&i.Setby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userActivate = `-- name: UserActivate :one
UPDATE capgrant
SET
    "from" = CASE
        WHEN (
            $1::TIMESTAMP
        ) IS NULL THEN NOW()
        ELSE (
            $1::TIMESTAMP
        )
    END,
    "to" = NULL
WHERE
    "user" = $2
    and realm = $3
RETURNING id, realm, "user", app, cap, "from", "to", setat, setby
`

type UserActivateParams struct {
	Activateat pgtype.Timestamp `json:"activateat"`
	Userid     string           `json:"userid"`
	Realm      string           `json:"realm"`
}

func (q *Queries) UserActivate(ctx context.Context, arg UserActivateParams) (Capgrant, error) {
	row := q.db.QueryRow(ctx, userActivate, arg.Activateat, arg.Userid, arg.Realm)
	var i Capgrant
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.User,
		&i.App,
		&i.Cap,
		&i.From,
		&i.To,
		&i.Setat,
		&i.Setby,
	)
	return i, err
}

const userDeactivate = `-- name: UserDeactivate :one
UPDATE capgrant
SET
    "to" = CASE
        WHEN (
            $1::TIMESTAMP
        ) IS NULL THEN NOW()
        ELSE (
            $1::TIMESTAMP
        )
    END,
    "from" = NULL
WHERE
    "user" = $2
    and realm = $3
RETURNING id, realm, "user", app, cap, "from", "to", setat, setby
`

type UserDeactivateParams struct {
	Deactivateat pgtype.Timestamp `json:"deactivateat"`
	Userid       string           `json:"userid"`
	Realm        string           `json:"realm"`
}

func (q *Queries) UserDeactivate(ctx context.Context, arg UserDeactivateParams) (Capgrant, error) {
	row := q.db.QueryRow(ctx, userDeactivate, arg.Deactivateat, arg.Userid, arg.Realm)
	var i Capgrant
	err := row.Scan(
		&i.ID,
		&i.Realm,
		&i.User,
		&i.App,
		&i.Cap,
		&i.From,
		&i.To,
		&i.Setat,
		&i.Setby,
	)
	return i, err
}
